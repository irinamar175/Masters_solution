You will receive a test script template that is prepopulated with test scenarios.
Your task is to implement any missing parts in the test script template and return the complete test script.
You must keep all the existing test scenarios in the test script template.
If you receive a feedback for your test script, you need to update the test script accordingly and return the updated test script.
You return JSON format of the test script as follows:
{
    "test_script": "your test script here"
}

Your test script output should have the following format:
from selenium import webdriver
from selenium.webdriver.common.alert import Alert
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select


def test_scenario_0():
    """
    Verify that alerts can be handled
    """
    driver = webdriver.Chrome()
    driver.get("https://testpages.eviltester.com/styled/index.html")
    assert "https://testpages.eviltester.com/styled/index.html" in driver.current_url, "Link failed!"
    title = driver.find_element(By.XPATH, "/html/body/div/h1").text
    assert "Practice Applications and Pages For Automating and Testing" in title, "Title failed!"
    alert_link = driver.find_element(By.LINK_TEXT, "Alerts (JavaScript)")
    alert_link.click()
    current_url = driver.current_url
    assert "https://testpages.eviltester.com/styled/alerts/alert-test.html" in current_url, "Link failed!"
    alert_button = driver.find_element(By.ID, "confirmexample")
    alert_button.click()
    alert = Alert(driver)
    assert "I am a confirm alert" in alert.text, "Alert failed!"
    alert.accept()
    driver.get("https://testpages.eviltester.com/styled/index.html")
    driver.quit()


def test_scenario_1():
    """
    Verify that Submit empty form works
    """
    driver = webdriver.Chrome()
    driver.get("https://testpages.eviltester.com/styled/index.html")
    assert "https://testpages.eviltester.com/styled/index.html" in driver.current_url, "Link failed!"
    title = driver.find_element(By.XPATH, "/html/body/div/h1").text
    assert "Practice Applications and Pages For Automating and Testing" in title, "Title failed!"
    alert_link = driver.find_element(By.LINK_TEXT, "HTML Form Example")
    alert_link.click()
    current_url = driver.current_url
    assert "https://testpages.eviltester.com/styled/basic-html-form-test.html" in current_url, "Link failed!"
    submit_button = driver.find_element(By.XPATH, '//*[@id="HTMLFormElements"]/table/tbody/tr[9]/td/input[2]')
    submit_button.click()
    title = driver.find_element(By.XPATH, "/html/body/div/div[3]/h2").text
    assert "Submitted Values" in title, "Title failed!" + title
    username_label = driver.find_element(By.NAME, "_username").text
    assert "No Value" in username_label, "Username failed!" + username_label
    pass_label = driver.find_element(By.NAME, "_password").text
    assert "No Value" in pass_label, "Password failed!" + pass_label
    driver.get("https://testpages.eviltester.com/styled/index.html")
    driver.quit()

def test_scenario_2():
    """
    Verify valid value input into username, password and dropdown works
    """
    driver = webdriver.Chrome()
    driver.get("https://testpages.eviltester.com/styled/index.html")
    assert "https://testpages.eviltester.com/styled/index.html" in driver.current_url, "Link failed!"
    title = driver.find_element(By.XPATH, "/html/body/div/h1").text
    assert "Practice Applications and Pages For Automating and Testing" in title, "Title failed!"
    html_link = driver.find_element(By.LINK_TEXT, "HTML Form Example")
    html_link.click()
    current_url = driver.current_url
    assert "https://testpages.eviltester.com/styled/basic-html-form-test.html" in current_url, "Link failed!"
    username = "funny_rabit"
    username_input = driver.find_element(By.NAME, "username")
    username_input.send_keys(username)
    password = "QWERasdf1234"
    password_input = driver.find_element(By.NAME, "password")
    password_input.send_keys(password)
    dropdown = driver.find_element(By.NAME, 'dropdown')
    drop = Select(dropdown)
    selected_item = "Drop Down Item 5"
    drop.select_by_visible_text(selected_item)
    submit_button = driver.find_element(By.XPATH, '//*[@id="HTMLFormElements"]/table/tbody/tr[9]/td/input[2]')
    driver.execute_script("arguments[0].scrollIntoView();", submit_button)
    submit_button.click()
    title = driver.find_element(By.XPATH, "/html/body/div/div[3]/h2").text
    assert "Submitted Values" in title, "Title failed!" + title
    username_label = driver.find_element(By.ID, "_valueusername").text
    assert username in username_label, "Username failed!" + username_label
    pass_label = driver.find_element(By.ID, "_valuepassword").text
    assert password in pass_label, "Password failed!" + pass_label
    dropdown_label = driver.find_element(By.ID, "_valuedropdown").text
    assert selected_item in dropdown_label, "Dropdown failed!" + dropdown_label
    driver.get("https://testpages.eviltester.com/styled/index.html")
    driver.quit()


if __name__ == "__main__":

    try:
        test_scenario_0()
    except AssertionError as e:
        print("Assertion error in test_scenario_0:", e)

    try:
        test_scenario_1()
    except AssertionError as e:
        print("Assertion error in test_scenario_1:", e)

    try:
        test_scenario_2()
    except AssertionError as e:
        print("Assertion error in test_scenario_2:", e)


